package Collections.g.map_realizations.HashMapp;

import java.util.HashMap;
import java.util.Map;

/**
 * здесь в кратции разберем как работает HashMap(в видео нарисовал целую схему работы hashMap при добавлении элементов)
 *
 * в классе HashMap есть внутренний класс Node(который часто называют Entry т.к. он имплементирует интерфейс Map.Entry)
 *
 * Node содержит: ключ, значение, hash и next(я как понимаю следующее значение)
 *
 * основа HashMap - это List, элементы которого это LinkedList-ы
 * когда мы помещаем элемент в HashMap, то сначала определяется позиция в List(с помощью hashcode)
 * а потом элемент помещается в эту позицию в виде Node(элемент LinkedList)(у Node будут значения : hashcode, value, key and id next Elem)
 *
 * второй урок "HahsMap в деталях" тоже сдесь оставлю т.к. он в основном будет рисовать
 *
 * при создании мапы мы можем задать 2 параметра, которые влияют на производительность:
 *  1) initial capacity - начальный размер массива
 *  2) load factor - коэффициент того, на сколько массив должен быть заполнен, после чего его размер будет увеличен вдвое
 *  (пример у нас массив на 16 ячеек (16*0.74 = 12) и когда заполним 12 элементов, то наш массив добавит новые 16 ячеек для добавления в них нов элементов)
 * в момент создания новых ячеек происходит что то на подобии "перехеширования" элементов, которые уже есть в мапе
 *
 * время методов get и put в мапе это O(1) а в худшем случае это O(n)
 *
 * изменения в Java8!!!:
 * если в 1 бакет добавляется очень много элементов и линкед лист становится слишком большим
 * то при достижении определенной длины(связанный список преобразуется в сбалансированное дерево(в нем поиск происзодит как бинарный))
 *
 * HashMap - это nonsyncronize коллекция(тоесть не используем в многопоточности(для нее есть коллекция ConcurrentHashMap))
 */
public class HashMapInDetails1 {
    public static void main(String[] args) {
        //1 lesson HashMap in details:
        // он только рисовал


        //2 lesson HashMap in details:

        //пример первоначальной установки initialCapacity и loadFactor(я прописал дефолтные значения)
        Map<Integer, String> map1 = new HashMap<>(16,0.75f);

        //1 метод: put() - добавление элементов
        map1.put(1, "one");
        map1.put(2, "two");
        map1.put(3, "three");
        map1.put(4, "four");

        //НЮАНС!!! в качестве ключа необходимо использовать immutable объекты(объекты, которые нельзя изменить)
        //тоеть если мы в качестве ключа используем например класс Student нужно его сделать immutable (прописать final у класса и переменных)
        //пример мы проверяем есть ли определенный ключ в мапе с помощью containsKey(выводом будет true)(ключи - это класс Student)
        //а потом мы изменили какое нибудь поле у этого ключа Student и при очередной проверке уже выдаст false!!!!(т.к. это поле у нас использовалось в hashmap)


    }
}
