package Algorithms.c.sorting.d.merge.sorting;

import java.util.Arrays;

/**
 * метод слияния двух отсортированных массивов
 *
 * как мы можем объединить 2 отсортированных массива:
 * 1 метод(плохой):
 * заводим массив суммарной длины, копируем массивы и применяем метод сортировки
 *
 * 2 метод(правильный):
 * используем алгорит ниже
 * принцип:
 * мы точно знаем что самое маленькое число в каждом массиве стоит первым
 * поэтому заводим 2 индекса самого маленького числа в обоих массивах
 * сравниваем и число которое меньше записываем в массив и перебрасываем его индекс
 */
public class MergeTwoSortArrays {
    public static void main(String[] args) {
        int[] arr1 = {1, 4, 6, 8, 14};
        int[] arr2 = {2, 5, 9, 15};
        int[] arrCommon = MergeTwoSortArrays.merge(arr1, arr2);
        System.out.println(Arrays.toString(arrCommon));
    }

    //в примере есть ошибка!!!(хорошо работает пока не достигнет первого элемента) - исправить
    public static int[] merge(int[] a, int[] b){
        int[] result = new int[a.length + b.length];
        int aIndex = 0;
        int bIndex = 0;
        while(aIndex + bIndex != result.length){
            //плохо!! тут 2 if-а(if и else) - нужно оптимизировать
            if(a[aIndex] < b[bIndex]){
                result [aIndex + bIndex] = a[aIndex++];//берет число и одновременно увеличивет индекс для след элемента
            } else {
                result [aIndex + bIndex] = b[bIndex++];//берет число и одновременно увеличивет индекс для след элемента
            }
        }
        return result;
    }

    //мысли по оптимизации:
    //1. заводим результат и пишем if что если 1ый index уже закончился. то берем 2ой и сравниваем
    //2. крутим до тех пор, пока не вылетаем за пределы а как только вылетели то в другом массиве копируем
    //    в массив оставшиеся числа с помощью SystemArrayCopy и заканчиваем
}
